# CI/CD workflow for setup-liquibase GitHub Action
# Validates code quality, builds the action, and tests it across multiple platforms
name: Continuous Integration

# Trigger workflow on pushes to main branch and all pull requests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job: Code quality checks and build validation
  code-quality-and-build:
    name: Code Quality & Build
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository code
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # Setup Node.js environment with caching for faster builds
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    # Install all npm dependencies using package-lock.json for reproducible builds
    - name: Install Dependencies
      run: npm ci
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    # Run security audit to check for vulnerabilities
    - name: Run Security Audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    # Run ESLint to check code style and catch potential issues
    - name: Run Code Linting
      run: npm run lint
    
    # Execute unit tests to validate core functionality
    - name: Run Unit Tests
      run: npm run test:ci
    
    # Build the TypeScript action into a distributable JavaScript bundle
    - name: Build Action Distribution
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    # Verify dist files are created correctly
    - name: Verify Build Output
      run: |
        if [ ! -f "dist/index.js" ]; then
          echo "dist/index.js not found!"
          exit 1
        fi
        if [ ! -f "dist/index.js.map" ]; then
          echo "dist/index.js.map not found!"
          exit 1
        fi
        echo "Build output verified successfully"

  # Job: Cross-platform integration testing
  integration-testing:
    name: Integration Tests (${{ matrix.os }})
    # Only run integration tests if code quality checks pass
    needs: code-quality-and-build
    runs-on: ${{ matrix.os }}
    
    # Test matrix: Multiple operating systems with different Liquibase versions
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        liquibase-version: ['4.32.0', 'latest']
        include:
          # Test caching scenarios
          - os: ubuntu-latest
            liquibase-version: '4.32.0'
            cache: true
          - os: ubuntu-latest
            liquibase-version: '4.32.0'
            cache: false
          # Test latest version with caching
          - os: ubuntu-latest
            liquibase-version: 'latest'
            cache: true
    
    steps:
    # Checkout the repository code
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # Setup Node.js environment with caching
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    # Install dependencies required for building the action
    - name: Install Dependencies
      run: npm ci
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    # Build the action since integration tests use the local action
    - name: Build Action for Testing
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    # Test the actual setup-liquibase action with specific version (OSS edition)
    - name: Test Liquibase Setup Action (OSS)
      id: setup-liquibase
      uses: ./
      with:
        version: ${{ matrix.liquibase-version }}
        edition: 'oss'
        cache: ${{ matrix.cache || true }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Verify outputs are set correctly
    - name: Verify Action Outputs
      shell: bash
      run: |
        echo "Liquibase version: ${{ steps.setup-liquibase.outputs.liquibase-version }}"
        echo "Liquibase path: ${{ steps.setup-liquibase.outputs.liquibase-path }}"
        if [ -z "${{ steps.setup-liquibase.outputs.liquibase-version }}" ]; then
          echo "liquibase-version output not set!"
          exit 1
        fi
        if [ -z "${{ steps.setup-liquibase.outputs.liquibase-path }}" ]; then
          echo "liquibase-path output not set!"
          exit 1
        fi

    # Verify Liquibase is available in PATH
    - name: Verify Liquibase in PATH
      shell: bash
      run: |
        which liquibase
        liquibase --version

    # Run Liquibase update against H2 database using the example changelog
    - name: Run Liquibase Update (H2)
      shell: bash
      run: |
        liquibase update \
          --changelog-file=changelog.xml \
          --url=jdbc:h2:./liquibase-test \
          --username=sa \
          --password=

    # Verify the update by checking the history
    - name: Verify Liquibase History (H2)
      shell: bash
      run: |
        liquibase history \
          --url=jdbc:h2:./liquibase-test \
          --username=sa \
          --password=

    # Test rollback functionality
    - name: Test Liquibase Rollback
      shell: bash
      run: |
        liquibase rollback-count 1 \
          --changelog-file=changelog.xml \
          --url=jdbc:h2:./liquibase-test \
          --username=sa \
          --password=

    # Test status command
    - name: Test Liquibase Status
      shell: bash
      run: |
        liquibase status \
          --changelog-file=changelog.xml \
          --url=jdbc:h2:./liquibase-test \
          --username=sa \
          --password=

  # Job: Error handling testing
  error-handling-tests:
    name: Error Handling Tests
    needs: code-quality-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    - name: Build Action for Testing
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    # Test invalid version format
    - name: Test Invalid Version Format
      uses: ./
      continue-on-error: true
      id: test-invalid-version
      with:
        version: 'invalid-version'
        edition: 'oss'
    
    - name: Verify Invalid Version Failed
      if: steps.test-invalid-version.outcome == 'success'
      run: |
        echo "Expected invalid version test to fail, but it succeeded!"
        exit 1
    
    # Test unsupported version
    - name: Test Unsupported Version
      uses: ./
      continue-on-error: true
      id: test-unsupported-version
      with:
        version: '4.25.0'
        edition: 'oss'
    
    - name: Verify Unsupported Version Failed
      if: steps.test-unsupported-version.outcome == 'success'
      run: |
        echo "Expected unsupported version test to fail, but it succeeded!"
        exit 1
    
    # Test invalid edition
    - name: Test Invalid Edition
      uses: ./
      continue-on-error: true
      id: test-invalid-edition
      with:
        version: '4.32.0'
        edition: 'invalid'
    
    - name: Verify Invalid Edition Failed
      if: steps.test-invalid-edition.outcome == 'success'
      run: |
        echo "Expected invalid edition test to fail, but it succeeded!"
        exit 1
    
    # Test Pro edition without license
    - name: Test Pro Edition Without License
      uses: ./
      continue-on-error: true
      id: test-pro-no-license
      with:
        version: '4.32.0'
        edition: 'pro'
    
    - name: Verify Pro Without License Failed
      if: steps.test-pro-no-license.outcome == 'success'
      run: |
        echo "Expected Pro without license test to fail, but it succeeded!"
        exit 1
    
    # Test latest version functionality
    - name: Test Latest Version
      uses: ./
      id: test-latest
      with:
        version: 'latest'
        edition: 'oss'
    
    - name: Verify Latest Version Success
      run: |
        echo "Latest version resolved to: ${{ steps.test-latest.outputs.liquibase-version }}"
        # Verify that a version was actually resolved
        if [ -z "${{ steps.test-latest.outputs.liquibase-version }}" ]; then
          echo "Latest version test failed - no version output!"
          exit 1
        fi
        # Verify the version format is semantic versioning
        if ! [[ "${{ steps.test-latest.outputs.liquibase-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Latest version test failed - invalid version format: ${{ steps.test-latest.outputs.liquibase-version }}"
          exit 1
        fi

  # Job: Pro edition testing (if license is available)
  pro-edition-tests:
    name: Pro Edition Tests
    needs: code-quality-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build Action for Testing
      run: npm run build
    
    # Test Pro edition with environment variable license
    - name: Test Pro Edition with Environment License
      uses: ./
      with:
        version: '4.32.0'
        edition: 'pro'
        cache: true
      env:
        LIQUIBASE_LICENSE_KEY: ${{ secrets.PRO_LICENSE_KEY }}
    
    # Test Pro edition with input parameter license
    - name: Test Pro Edition with Input License
      uses: ./
      with:
        version: '4.32.0'
        edition: 'pro'
        liquibase-pro-license-key: ${{ secrets.PRO_LICENSE_KEY }}
        cache: true
    
    # Verify Pro-specific commands work
    - name: Test Pro Commands
      run: |
        liquibase --version | grep -i pro || echo "Version output: $(liquibase --version)"
        # Note: Some Pro features require specific database setups
        # This is a basic validation that Pro edition is installed